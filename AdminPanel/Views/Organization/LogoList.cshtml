@model   AdminPanel.Models.Organization_model
@using Newtonsoft.Json
@{
    ViewData["Title"] = "logoList";
}
@{

    List<object> GridCommands = new List<object>();

    GridCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit btnEdit", cssClass = "e-flat" } });
    GridCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete btnDelete", cssClass = "e-flat" } });
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h4 class="p-2 m-0">
                Organization Logo List
            </h4>
        </div>
    </div>
</div>


<div id="Dilog" class="w-25 "></div>
<div class="container-fluid mt-1 ">

    @* //dataSource="@ViewBag.OrgData" *@   
    <ejs-grid id="Grid" dataSource="@ViewBag.OrgData" allowSorting="true" allowPaging="true" allowResizing="true" allowFiltering="true" allowExcelExport="true" toolbar="@(new List<string>(){"Search","CustomButton" } )">
        <e-grid-editsettings></e-grid-editsettings>
        <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
        <e-grid-pageSettings pageSize="5" pageSizes="@(new string[] { "5", "10" ,"12","15","20", "All" })" />
        <e-grid-columns>
            <e-grid-column headerText="Option" width="105" commands="GridCommands"></e-grid-column>
            <e-grid-column field="SYS_CODE" visible=false isPrimaryKey="true" headerText="Id" textAlign="Right" width="105"></e-grid-column>
          @*   <e-grid-column field="Organization_Code" headerText="Organization Code" width="200"></e-grid-column> *@
            <e-grid-column field="Organization_Name" headerText=" Organizaion Name" width="200" filter="true"></e-grid-column>
            <e-grid-column field="Note" headerText="Note" width="200" filter="false" allowFiltering="false"></e-grid-column>
           @*  <e-grid-column field="LogoImg" headerText="Logo" width="150" allowFiltering="false"></e-grid-column> *@
            <e-grid-column field="LogoImg"
                           headerText="Logo"
                           width="150"
                           allowFiltering="false"
                           template='<img src="data:${MimeType};base64,${LogoImg}" style="width:136px; height:46px;" />'>
                           @* '${LogoImg ? `<img src="data:${MimeType};base64,${LogoImg}" style="width:136px; height:46px;" />` : `<span style="width:100px; height:100px; display:block; text-align:center; line-height:100px;">No Logo</span>` }'> *@
            </e-grid-column>
        </e-grid-columns>   
    </ejs-grid>  
        
</div>

<div id="dialog" class="w-25"> </div>

<div id="dialog" class="w-25"> </div>
<div id="toast"></div>
<script id="template3" type="text/x-template">
    <div class="template-content">${Logo}</div>
</script>
@{
    bool showPopup = false;  // Default value
    if (TempData["showPopup"] != null)
    {
        // Safe conversion: check the string value
        bool.TryParse(TempData["showPopup"].ToString(), out showPopup);
    }
}


@if (showPopup)
{
   
        <script type="text/javascript">
            $(document).ready(function () {
            // Create and show the toast notification
            var toastObj = new ej.notifications.Toast({
                content: 'Record updated successfully.',
                position: { X: 'Right', Y: 'Top' },
                cssClass: 'green-toast' // Add custom class for styling
            });
            toastObj.appendTo('#toast'); // Append to the toast container
            toastObj.show();  // Show the toast
        });
        </script>
   
       @*  <div id="dialog" class="w-25"></div>  <!-- Popup container --> *@

    
    
}
<style>
    /* Custom styles for the green toast notification */
    .green-toast {
        background-color: #4CAF50 !important; /* Green background */
        color: white !important; /* White text */
       
    }
</style>



<script type="text/javascript">
     $(document).ready(function () {

    //     // Show alert dialog when document is ready
    //     var dialog = new ej.popups.Dialog({
    //         header: 'ALERT',
    //         content: '<div> Logo updated successfully.</div>',
    //         buttons: [
    //             { buttonModel: { content: 'OK', isPrimary: true }, click: onOkButtonClick, id: 'confirmOk' }
    //         ]
    //     });
    //     dialog.appendTo('#dialog');
    //     dialog.show(); // Show the dialog

       

        // Add icon and text to the "Add New" button
        var spanElement = $('<span class="e-btn-icon e-add e-icons e-icon-left "></span>');
        $(".e-tbar-btn-text").text("Add New");
        $("#Grid_CustomButton").prepend(spanElement);

        // Redirect to 'logo' page when "Add New" button is clicked
        $("#Grid_CustomButton").on("click", function () {
            window.location.href = '@Url.Action("logo", "Organization")';
        });

        // Event listener for Edit and Delete actions on the grid
        document.body.addEventListener("click", function (event) {
            var target = event.target;

            // Handle Edit button click
            if (target.classList.contains("e-editbutton") || target.classList.contains("btnEdit")) {
                var rowData = target.closest("tr").getAttribute("data-uid");
                handleEditCommand(rowData);
            }
            // Handle Delete button click
            else if (target.classList.contains("e-deletebutton") || target.classList.contains("btnDelete")) {
                var rowData = target.closest("tr").getAttribute("data-uid");
                handleDeleteCommand(rowData);
            }
        });

    });

    // Function to handle edit action
    function handleEditCommand(rowData) {
        var grid = document.getElementById("Grid").ej2_instances[0];
        var data = grid.getRowObjectFromUID(rowData).data;
        var EditId = data.Sys_Code;

        if (EditId != "") {
            window.location.href = '@Url.Action("logo", "Organization")' + '?id=' + EditId;
        }
    }

    // Function to handle delete action (assuming you have this function elsewhere in your code)
    // function handleDeleteCommand(rowData) {
    //     // Implement your delete logic here, for example:
    //     var grid = document.getElementById("Grid").ej2_instances[0];
    //     var data = grid.getRowObjectFromUID(rowData).data;
    //     var deleteId = data.Sys_Code;

        // if (deleteId != "") {
        //     // Execute the delete action (e.g., an AJAX call or a redirect)
        //     // window.location.href = '@Url.Action("DeleteDocument", "Organization")' + '?id=' + deleteId;
        //     alert('Delete functionality not implemented yet for ID: ' + deleteId);
        // }
    //}

    

    //delete Functionality --------------------------------

    var dialog = new ej.popups.Dialog({
        header: 'Confirm Delete',
        content: '<div>Are you sure you want to delete this record?</div>',
        buttons: [
            { buttonModel: { content: 'Yes', isPrimary: true }, click: onYesButtonClick, id: 'confirmDelete' },
            { buttonModel: { content: 'No' }, click: onNoButtonClick, id: 'cancelDelete' }
        ]

    });

    function clearDialogDiv() {
        var dialogDiv = document.getElementById("Dilog");
        if (dialogDiv) {
            while (dialogDiv.firstChild) {
                dialogDiv.removeChild(dialogDiv.firstChild);
            }
        }
    }


    function onNoButtonClick() {
        dialog.hide()
        clearDialogDiv();
        var popup = document.getElementById('Dilog');
        console.log(popup);
        var popupElement = popup.querySelector('w-25.e-control.e-popup.e-popup-.e-dialog');
        console.log(popupElement);
        if (popupElement) {

            popup.removeChild(popupElement);
        }
    }

    
    function onYesButtonClick() {
        clearDialogDiv();
        console.log("ID value before AJAX call:", id); // Debugging line

        if (id > 0) {

            $.ajax({
                url: '@Url.Action("DeleteDocument", "Organization")',
                method: "GET",
                data: { SysCode: id },
                dataType: 'json',
                success: function (data) {
                    console.log("Response data:", data); // Debugging line
                    if (data === true) {
                        // Create and show the toast notification on successful deletion
                        var toastObj = new ej.notifications.Toast({
                            content: 'Deleted successfully',
                            position: { X: 'Right', Y: 'Top' },
                            cssClass: 'green-toast' // Add custom class for styling
                        });
                        toastObj.appendTo('#toast'); // Append to the toast container
                        toastObj.show(); // Show the toast

                        // Reload the page after showing the toast
                        setTimeout(function () {
                            window.location.reload();
                        }, 2000); // Adjust the timeout duration as needed (2000ms = 2 seconds)
                       

                    } else {
                        alert("Deletion failed. Please try again.");
                    }
                },
                error: function (err) {
                    console.log("AJAX error:", err); // Debugging line
                    alert("An error occurred while attempting to delete the document. Please try again.");
                }
            });
        } else {
            console.warn("Invalid ID, SysCode is zero."); // Warning for debugging
        }

        // Refresh the grid after AJAX call, whether successful or not
        var grid = document.getElementById('Grid').ej2_instances[0];
        grid.refresh();
    }





    function handleDeleteCommand(rowData) {
        
        clearDialogDiv();
        var grid = document.getElementById("Grid").ej2_instances[0];
        dialog.appendTo('#Dilog');

        var data = grid.getRowObjectFromUID(rowData).data;
        console.log("Delete command clicked", data.Sys_Code);
        id = data.Sys_Code;
        console.log(id);
        if (dialog) {
            dialog.show(); // Show the dialog
        }

    }

    // Function for OK button click on dialog
    function onOkButtonClick() {
        // Handle the OK button logic, such as closing the dialog
        var dialog = document.getElementById("dialog").ej2_instances[0];
        dialog.close();
    }


    function onOkButtonClick() {
        // Close the dialog
        this.hide();
    }
</script>

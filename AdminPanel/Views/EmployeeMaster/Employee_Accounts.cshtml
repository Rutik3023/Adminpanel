@model AdminPanel.Models.Employee

@{

    List<object> GridCommands = new List<object>();

    GridCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit btnEdit", cssClass = "e-flat" } });

    GridCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete btnDelete", cssClass = "e-flat" } });

}

<div id="EmpMasterDilog" class="w-25"></div>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card rounded shadow-sm">
                <div class="card-body">

                    <form  id="EmpAccount" >
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="row">
                            
                            <div class="col-lg-3 col-md-6 col-sm-12" >
                                <ejs-textbox name="Bank_AC_No" maxlength="50" id="Bank_AC_No" floatLabelType=Auto placeholder="Bank Account No *" ejs-for="@Model.Bank_AC_No"></ejs-textbox>
                            </div>

                            <div class="col-lg-3 col-md-6 col-sm-12">
                                <ejs-textbox name="IFSC_Code" maxlength="11" id="IFSC_Code" floatLabelType=Auto placeholder="IFSC Code *" ejs-for="@Model.IFSC_Code"></ejs-textbox>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-12">
                                <ejs-textbox name="Bank_Name" maxlength="100" id="Bank_Name" floatLabelType=Auto placeholder="Bank Name *" ejs-for="@Model.Bank_Name"></ejs-textbox>
                            </div>

                            <div class="col-lg-3 col-md-6 col-sm-12">
                                <ejs-textbox multiline=true name="Bank_Address" maxlength="500" id="Bank_Address" floatLabelType=Auto placeholder="Bank Address" rows="1" ejs-for="@Model.Bank_Address"></ejs-textbox>
                            </div>

                        </div>

             
                    </form>

                    <span class=" fw-bold fs-5 ms-2">Add GL Accounts</span>
                    <div> <button type="button" id="toggleBtn" class="e-btn bg-danger text-light  ms-2 mb-3">Add New</button></div>
                    <hr />

                    <div id="GLAccount" class="row d-none border-1">

                        <form id="GLAccountFrm">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="row">

                                <div class="col-lg-3 col-md-6 col-sm-12" style="display:none" >
                                    <ejs-textbox name="Sys_Code_Gl" id="Sys_Code_Gl" floatLabelType=Auto placeholder="Sys_Code" ></ejs-textbox>
                                </div>
                                <div class="col-lg-3 col-md-6 col-sm-12">
                                    <ejs-dropdownlist id="Branch_Location_Code_Gl" floatLabelType=Auto placeholder="Branch Location *" filterBarPlaceholder="Search" dataSource="@ViewBag.BranchLocation">
                                        <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>

                                <div class="col-lg-3 col-md-6 col-sm-12">
                                    <ejs-dropdownlist id="GL_AccountCode" floatLabelType=Auto placeholder="GL Account  *" filterBarPlaceholder="Search">
                                        <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                                <div class="col-lg-3 col-md-6 col-sm-12">
                                    <ejs-dropdownlist id="CurrencyCode" floatLabelType=Auto placeholder="Currency " filterBarPlaceholder="Search" dataSource="@ViewBag.Currency">
                                        <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>

                                <div class="col-lg-3 col-md-6 col-sm-12">
                                    <ejs-dropdownlist id="GlStatus" floatLabelType=Auto placeholder="Status " filterBarPlaceholder="Search" dataSource="@ViewBag.Status">
                                        <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                                <div class="col-lg-3 col-md-6 col-sm-12">
                                    <ejs-textbox multiline=true name="Note" maxlength="4000" id="GlNote" floatLabelType=Auto placeholder="Note "></ejs-textbox>
                                </div>

                                

                            </div>


                        </form>
                        <div class="col-lg-3 col-md-6 col-sm-12 mt-3 mb-3">
                            <button type="button" id="submitGlDetails" name="Submit" class="e-btn bg-success text-light">Submit</button>
                        </div>
                        <hr />

                        <div id="DilogAccount" class="w-25 "></div>
                        <div class="container-fluid mt-1 ">

                            <ejs-grid id="GridMapping" dataSource="@ViewBag.GetGlMappingDetails" allowSorting="true" allowPaging="true" allowResizing="true" allowFiltering="true" allowExcelExport="true" toolbar="@(new List<string>() {"Search" })">
                                <e-grid-editsettings></e-grid-editsettings>
                                <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
                                <e-grid-pageSettings pageSize="5" pageSizes="@(new string[] { "5", "10" ,"12","15","20", "All" })" />
                                <e-grid-columns>
                                    <e-grid-column headerText="Option" width="105" commands="GridCommands"></e-grid-column>
                                    <e-grid-column field="sys_Code_Gl" visible="false" isPrimaryKey="true" headerText="Id" textAlign="Right" width="105"></e-grid-column>
                                    <e-grid-column field="OrgCode" headerText="Organization Name" textAlign="Right" width="220"></e-grid-column>
                                    <e-grid-column field="EmpCode" headerText="Employee Name" textAlign="Right" width="180"></e-grid-column>
                                    <e-grid-column field="BranchLocationCode" headerText="Branch Location" textAlign="Right" width="220"></e-grid-column>
                                    <e-grid-column field="GL_AccountCode" headerText="GL Account Name " textAlign="Right" width="220"></e-grid-column>
                                    <e-grid-column field="CurrencyCode" headerText="Currency " textAlign="Right" width="220"></e-grid-column>
                                    <e-grid-column field="Status" width="150" headerText="Status" allowFiltering="false" filter="false"></e-grid-column>
                                    <e-grid-column field="Note" width="150" headerText="Note" allowFiltering="false" filter="false"></e-grid-column>
                                    <e-grid-column field="Sys_Created_By" width="150" headerText="Created By" allowFiltering="false" filter="false"></e-grid-column>
                                    <e-grid-column field="Sys_Created_On" width="150" headerText="Created On" allowFiltering="false" filter="false"></e-grid-column>
                                    <e-grid-column field="Sys_Modified_By" width="150" headerText="Modified By" allowFiltering="false" filter="false"></e-grid-column>
                                    <e-grid-column field="Sys_Modified_On" width="150" headerText="Modified On" allowFiltering="false" filter="false"></e-grid-column>
                                </e-grid-columns>
                            </ejs-grid>

                        </div>
                    </div>
                    



                 
                </div>
            </div>
        </div>
    </div>

    
</div>


<script>
    document.getElementById('toggleBtn').addEventListener('click', function () {
      
        var element = document.getElementById('GLAccount');
        if (element.classList.contains('d-none')) {
            element.classList.remove('d-none');
            resetForm();
        } else { resetForm(); }
    });

    function resetForm() {

        document.getElementById('GLAccountFrm').reset();

    }


    $(document).ready(function () {



        var optionsa = {
            rules: {
                'Branch_Location_Code_Gl': { required: [true, "Please select branch location"] },
                // 'Department_Head': { required: [true, "Please Complete Profile"] },
                'GlStatus': { required: [true, "Please Select Status"] }
            }

        }

        var EmpMasterdialog = new ej.popups.Dialog({
            header: 'Warning',
            content: '<div>Please Fill Employee Details</div>',
            buttons: [
                { buttonModel: { content: 'Yes', isPrimary: true }, click: HidePopUp },

            ]

        });



       

        // console.log("Before Rules:" + optionsa)
        var formObject = new ej.inputs.FormValidator('#GLAccountFrm');
        console.log(formObject);
        formObject.rules = optionsa.rules,
            formObject.customPlacement = function (inputElement, errorElement) {
                // Check the type of the input element
                var elementType = inputElement.tagName.toLowerCase();

                var parentElement = inputElement.parentElement.parentElement;

                // For different types of elements, append error element accordingly
                if (elementType === "input" || elementType === "textarea" || elementType === "select") {
                    parentElement.appendChild(errorElement);
                } else if (elementType === "ejs-numerictextbox" || elementType === "ejs-textbox" || elementType === "ejs-dropdownlist" || elementType === "ejs-datepicker") {
                    // Assuming these are the custom elements
                    parentElement.parentElement.appendChild(errorElement);
                }
            }




        var saveButton = document.getElementById('submitGlDetails');
        saveButton.addEventListener('click', function (event) {

            console.log("Before Rules:" + optionsa)


            var IsValid = formObject.validate();
            if (IsValid) {
                var Emp = document.getElementById('Sys_Code').ej2_instances[0].value;
                if (Emp != null) { SaveGlMapping(); }
                else {
                    clearEmpMainDialog();
                    EmpMasterdialog.appendTo('#EmpMasterDilog')
                    if (EmpMasterdialog) { EmpMasterdialog.show() }
                }
                  
                 
                
                
                
               
            } else {
               
                event.preventDefault();


            }

        });


        function HidePopUp() {
            EmpMasterdialog.hide();
            clearEmpMainDialog();
        }
    });

   
    function clearEmpMainDialog() {
        
        var dialogDiv = document.getElementById("EmpMasterDilog");
        if (dialogDiv) {
            while (dialogDiv.firstChild) {
                dialogDiv.removeChild(dialogDiv.firstChild);
            }
        }
    }


    

    function SaveGlMapping()
    {
        var postData = {
            "EmpCode": document.getElementById('Sys_Code').ej2_instances[0].value,
            "Sys_Code_Gl": document.getElementById('Sys_Code_Gl').ej2_instances[0].value,
            "GL_AccountCode": document.getElementById('GL_AccountCode').ej2_instances[0].value,
            "BranchLocationCode": document.getElementById('Branch_Location_Code_Gl').ej2_instances[0].value,
            "CurrencyCode": document.getElementById('CurrencyCode').ej2_instances[0].value,
            "Status": document.getElementById('GlStatus').ej2_instances[0].value,
            "Note": document.getElementById('GlNote').ej2_instances[0].value
        };
        console.log("postData");
        console.log(postData);
        $.ajax({
            url: '/HRM/EmployeeMaster/Save_GL_Mapping', // Replace with your action and controller
            type: 'POST',
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify(postData),
            success: function (response) {

                if (response != null) {

                    var grid = document.getElementById("GridMapping").ej2_instances[0];
                    grid.dataSource = response; // Correct camelCase spelling for dataSource
                    grid.refresh();
                    console.log(response);
                    resetForm();

                } else { resetForm(); }


            },
            error: function (xhr, status, error) {
                // Handle errors
                console.error(xhr.responseText);
            }
        });
    }

    ///////////////////
    var dialog = new ej.popups.Dialog({
        header: 'Confirm Delete',
        content: '<div>Are you sure you want to delete this record?</div>',
        buttons: [
            { buttonModel: { content: 'Yes', isPrimary: true }, click: onYesButtonClick, id: 'confirmDelete' },
            { buttonModel: { content: 'No' }, click: onNoButtonClick, id: 'cancelDelete' }
        ]

    });


    function clearDialogDiv() {
        var dialogDiv = document.getElementById("Dilog");
        if (dialogDiv) {
            while (dialogDiv.firstChild) {
                dialogDiv.removeChild(dialogDiv.firstChild);
            }
        }
    }


    function onNoButtonClick() {
        dialog.hide()
        clearDialogDiv();
        var popup = document.getElementById('Dilog');
        console.log(popup);
        var popupElement = popup.querySelector('w-25.e-control.e-popup.e-popup-.e-dialog');
        console.log(popupElement);
        if (popupElement) {
           
            popup.removeChild(popupElement);
        }
    }

    function onYesButtonClick() {

        clearDialogDiv();
        console.log("Yes button clicked", id)

        if (id != "" && id != null) {
            $.ajax({
                "url": '@Url.Action("Delete_Segment", "SegmentMaster")',
                method: "GET",
                data: { Id: id },
                dataType: 'json',
                success: function (data) {
                    console.log(data);
                    if (data = true) {
                        console.log(data.Staus);
                        window.location.reload();
                    }

                },
                error: function (err) {
                    window.location.href = errorViewUrl;
                    console.log("error: " + err)
                }

            })
        }
        id = 0;
        //Call Delete Ajax
        id = 0;

        var grid = document.getElementById('GridMapping').ej2_instances[0];
        grid.refresh();

    }

    function handleDeleteCommand(rowData) {
        clearDialogDiv();
        var grid = document.getElementById('GridMapping').ej2_instances[0];
        dialog.appendTo('#Dilog');

        var data = grid.getRowObjectFromUID(rowData).data;
        console.log("Delete command clicked", data.Sys_Code);
        id = data.Sys_Code;
        console.log(id);
        if (dialog) {
            dialog.show(); // Show the dialog
        }

    }

    function handleEditCommand(rowData) {
        // Example: Implement logic to handle edit command
        var grid = document.getElementById("GridMapping").ej2_instances[0];
        var data = grid.getRowObjectFromUID(rowData).data;
        console.log("Edit command clicked", data);
        var EditId = data.sys_Code_Gl;
        console.log(EditId);
        $.ajax({
            "url": '@Url.Action("Get_Employee_GL_Mapping", "EmployeeMaster")',
            method: "GET",
            data: { Id: EditId },
            dataType: 'json',
            success: function (data) {
                console.log("Fhhhh");
                console.log(data.sys_Code_Gl
                );
                if (data != null) {
                    console.log("response data");
                    console.log(data);

                    var SysCodeGL = document.getElementById('Sys_Code_Gl').ej2_instances[0];
                    console.log(SysCodeGL);
                    SysCodeGL.value = data.sys_Code_Gl;

                    var GL_AccountCode = document.getElementById('GL_AccountCode').ej2_instances[0];
                    GL_AccountCode.value = data.glAccountCode;

                    var BranchLocationCode = document.getElementById('Branch_Location_Code_Gl').ej2_instances[0];
                    BranchLocationCode.value = data.branchLocationCode;

                    var CurrencyCode = document.getElementById('CurrencyCode').ej2_instances[0];
                    CurrencyCode.value = data.currencyCode;

                    var Status = document.getElementById('GlStatus').ej2_instances[0];
                    Status.value = data.status;

                    var Note = document.getElementById('GlNote').ej2_instances[0];
                    Note.value = data.note
                        ;
                }

            },
            error: function (err) {
                window.location.href = errorViewUrl;
                console.log("error: " + err)
            }

        })




    }



    //Event when user Click On Edit or Delete Option Starts
    document.body.addEventListener("click", function (event) {
        var target = event.target;

        if (target.classList.contains("e-editbutton") || target.classList.contains("btnEdit")) {
            
            var row = target.closest("tr");
            var grid = row.closest(".e-grid");
            console.log("ggggg" + grid)
            if (grid && grid.id === "GridMapping") {
                
                var rowData = row.getAttribute("data-uid");
                handleEditCommand(rowData);
                // Handle edit for GridMapping
            } 
        } else if (target.classList.contains("e-deletebutton") || target.classList.contains("btnDelete")) {
            var row = target.closest("tr");
            var grid = row.closest("ejs-grid");

            if (grid && grid.id === "GridMapping") {
            
                var rowData = row.getAttribute("data-uid");
                handleDeleteCommand(rowData, "GridMapping");
            } else if (grid && grid.id === "FamilyGrid") {
                alert("Delete in FamilyGrid");
                var rowData = row.getAttribute("data-uid");
                handleDeleteCommand(rowData, "FamilyGrid");
            }
        }
    });

 

</script>
